import json
import logging
import torch
from random import randint
from RNN import init_rnn, evaluate
from secret import token
from telegram import ReplyKeyboardMarkup
from telegram.ext import (Updater, CommandHandler, MessageHandler, Filters,
                          ConversationHandler)

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

CHOICE, THEME, SEND = range(3)

reply_keyboard = [['–ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç', '–†–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç'],
                  ['–¢–µ–∫—Å—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è', '–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π'],
                  ['–ù–∏—á–µ–≥–æ']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)

# load model
with open('meta', 'r') as meta_data:
    meta = json.load(meta_data)
model, seq, index_char, char_index = init_rnn(meta['file_name'], meta['model']['hidden_size'],
                                              meta['model']['embedding_size'], meta['model']['n_layers'])
model.load_state_dict(torch.load('model'))


def start(update, context):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç!")
    update.message.reply_text("–Ø Lorem Newspom Bot, —è —É–º–µ—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤—Å—è–∫–∏–π –±—Ä–µ–¥ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π, "
                              "–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –≤–µ—Ä—Å—Ç–∫–µ, –∏–ª–∏ –≥–¥–µ –Ω–∏–±—É—å –µ—â–µü§î")
    update.message.reply_text("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–µ–Ω", reply_markup=markup)
    return CHOICE


def card_text(update, context):
    update.message.reply_text(evaluate(model, char_index, index_char, " ", 120, 0.2))
    return ConversationHandler.END


def random_text(update, context):
    update.message.reply_text(evaluate(model, char_index, index_char, " ", randint(100, 10000)))
    return ConversationHandler.END


def big_text(update, context):
    update.message.reply_text(evaluate(model, char_index, index_char, " ", 1200))
    return ConversationHandler.END


def settings(update, context):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞")
    return THEME


def theme(update, context):
    context.user_data['scale'] = update.message.text
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ç–µ–∫—Å—Ç–∞. (–ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–±–µ–ª)")
    return SEND


def get_setting_text(update, context):
    update.message.reply_text(evaluate(model, char_index, index_char,
                                       update.message.text, int(context.user_data['scale'].strip())))
    return ConversationHandler.END


def done(update, context):
    update.message.reply_text("–ù–∏—á–µ–≥–æ, —Ç–∞–∫ –Ω–∏—á–µ–≥–æ ü§∑‚Äç")
    return ConversationHandler.END


def main():
    updater = Updater(token, use_context=True)
    dp = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start),
                      MessageHandler(Filters.regex('^–ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç$'),
                                     card_text),
                      MessageHandler(Filters.regex('^–†–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç$'),
                                     random_text),
                      MessageHandler(Filters.regex('^–¢–µ–∫—Å—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è$'),
                                     big_text),
                      MessageHandler(Filters.regex('^–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π$'),
                                     settings)
                      ],

        states={
            CHOICE: [
                    MessageHandler(Filters.regex('^–ö–∞—Ä—Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç$'),
                                   card_text),
                    MessageHandler(Filters.regex('^–†–∞–Ω–¥–æ–º–Ω—ã–π —Ç–µ–∫—Å—Ç$'),
                                   random_text),
                    MessageHandler(Filters.regex('^–¢–µ–∫—Å—Ç –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è$'),
                                   big_text),
                    MessageHandler(Filters.regex('^–ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π$'),
                                   settings)
                    ],
            THEME: [MessageHandler(Filters.text, theme)],
            SEND: [MessageHandler(Filters.text, get_setting_text)]
        },

        fallbacks=[MessageHandler(Filters.regex('^–ù–∏—á–µ–≥–æ$'), done)]
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()
